<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:util="http://www.springframework.org/schema/util"
		xmlns:configurator="http://cocoon.apache.org/schema/configurator"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd
			http://cocoon.apache.org/schema/configurator http://cocoon.apache.org/schema/configurator/cocoon-configurator-1.0.1.xsd">


	<!-- database connections -->
	
	<bean id="webdesk-DataSource" class="org.apache.tomcat.dbcp.dbcp.BasicDataSource" destroy-method="close">
		<!-- other implementations could be:
			org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource
			org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource -->
		
		<property name="driverClassName">
			<value>${hibernate.connection.driver_class}</value>
		</property>
		<property name="url">
			<value>${hibernate.connection.url}</value>
		</property>
		<property name="username">
			<value>${hibernate.connection.username}</value>
		</property>
		<property name="password">
			<value>${hibernate.connection.password}</value>
		</property>
		
		<property name="maxIdle">
			<value>80</value>
		</property>
		
		<!-- For a test utility concerning database pool problems see po_testJdbcConnections.act in
			webdesk-po-webclient/src/test/resources/at/workflow/webdesk/po/actions/testJdbcConnections -->
		
		<!-- We want the application to never receive an exception from the pool due to lack of connections.
			Setting this to indefinite would cause an OutOfMemoryError sooner or later when abandoned
			connections do not get garbage-collected, so we need removeAbandoned (see below). -->
		<property name="maxActive">
			<value>-1</value>
			<!--<value>300</value>-->
		</property>
		
		<!-- Enable removing of connections that have not been released by the application developers.
			After removeAbandonedTimeout seconds of no activity on a connection it will be closed. -->
		<property name="removeAbandoned">
			<value>true</value>
		</property>
		<!-- Needed when removeAbandoned is true. Due to the perception that connections of webdesk-jobs
			got closed before the job is done we set this to 30 minutes. -->
		<property name="removeAbandonedTimeout">  <!-- in seconds -->
			<value>1800</value>
		</property>
		
		<!-- log the code which is responsible for the abandoned connection -->
		<property name="logAbandoned">  
			<value>true</value>
		</property>
	
        <!--
            Following property is a fix to avoid closed
            connections. Unfortunatly there is no single validation query which
            works in all database engines. So we use a Spring Expression to 
            define a validationQuery depending on the used JDBC Driver:
            hsqldb ... No validationQuery
            Oracle ... SELECT 1 from DUAL
            Others ... SELECT 1
            
            for more information on possible values, read:
            http://stackoverflow.com/questions/3668506/efficient-sql-test-query-or-validation-query-that-will-work-across-all-or-most
        -->
            
        <property name="validationQuery">
            <value>#{'${hibernate.connection.driver_class}' == 'org.hsqldb.jdbcDriver' ? '' : ( '${hibernate.connection.driver_class}' == 'oracle.jdbc.OracleDriver' ? 'SELECT 1 FROM DUAL' :'SELECT 1')}</value>
        </property>
		
		<!-- The maximum number of milliseconds that the pool will wait (when there are no available connections)
			for a connection to be returned before throwing an exception, or -1 to wait indefinitely (default). 
			We want to wait indefinitely, which is default, so this is commented out.
		<property name="maxWait">
			<value>2000</value>
		</property> -->
		
		<!-- Having an evictor thread did not help when maxActive is reached.
		<property name="timeBetweenEvictionRunsMillis">
			<value>10000</value>
		</property>
		-->
	</bean>


	<!-- Declaration of the session factory 
		Has to include all mapping files that relate
		
		has to include all directories or jars of model-components of 
		the referenced moduls!
	-->

	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"> </bean>

	<bean id="webdesk-SessionFactory" name="sessionFactory" class="at.workflow.webdesk.tools.hibernate.ExtLocalSessionFactoryBean">
		
		<property name="registrationBeanMap">
			<configurator:bean-map type="at.workflow.webdesk.tools.hibernate.HibernateHbmRegistration" />
		</property>
		
		<property name="annotatedClassesBeanMap">
			<configurator:bean-map type="at.workflow.webdesk.tools.hibernate.HibernateAnnotationsRegistration" />
		</property>
		
		<property name="eventListeners">
            <map>
                <entry key="post-update">
                    <bean class="org.hibernate.search.event.FullTextIndexEventListener"/>
                </entry>
                <entry key="post-insert">
                    <bean class="org.hibernate.search.event.FullTextIndexEventListener"/>
                </entry>
                <entry key="post-delete">
                    <bean class="org.hibernate.search.event.FullTextIndexEventListener"/>
                </entry>
            </map>
        </property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- prop key="hibernate.default_schema">webdesk</prop-->
				
				<!-- Database Property -->
				<prop key="hibernate.connection.poolSize">0</prop>
				
				<!-- show SQL statements? -->
				<prop key="hibernate.show_sql">false</prop>
				
				<!-- show them nicely? -->
				<prop key="hibernate.format_sql">true</prop>

				<!--
					DO NOT include this in a production environment! -> makes problem with HSQLDB
				<prop key="hibernate.default_schema"></prop>
				-->
				
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.provider_class">at.workflow.webdesk.tools.hibernate.CustomCacheProvider</prop>
				
				<!--
					fri_2011-06-15: try to get around connection pool exhaustion:
					2 means WHEN_EXHAUSTED_GROW, 0 means FAIL, 1 means BLOCK (default)
					-> this prop seems not to work with this hibernate version!
					
				<prop key="hibernate.dbcp.whenExhaustedAction">2</prop>
				-->
				
			</props>
		</property>
		<property name="dataSource">
			<ref bean="webdesk-DataSource"/>
		</property>
		<property name="schemaUpdate">
			<value>true</value>
		</property>
		<property name="lobHandler">
			<ref bean="lobHandler"/>
		</property>
		
	</bean>
	
	<bean id="webdesk-OpenSessionInViewInterceptor" class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
		<property name="sessionFactory" ref="sessionFactory"/>
		<property name="singleSession" value="true"/>
	</bean>
	
	<!--  
		The created cache manager is an instance of net.sf.ehcache.CacheManager
	-->
	<bean id="CacheManager" 
		class="at.workflow.webdesk.tools.cache.CustomEhCacheManagerFactoryBean"/>
	
	<bean id="CacheSystemProperties" class="at.workflow.webdesk.tools.config.StartupSystemPropertiesWriter">
		<constructor-arg>
			<map>
				<entry key="net.sf.ehcache.enableShutdownHook" value="true"/>
			</map>
		</constructor-arg>
	</bean>
	
	<bean id="SimpleCacheKeyGenerator" class="at.workflow.webdesk.tools.cache.SimpleCacheKeyGenerator"/>
	
	<bean id="HashCodeKeyGenerator" class="at.workflow.webdesk.tools.cache.HashCodeCacheKeyGeneratorWrapper">
		<property name="cacheHibernateUtils">
			<ref bean="PoCacheHibernateUtils"/>
		</property>
	</bean>
	
	<bean id="PoCacheHibernateUtils" class="at.workflow.webdesk.tools.cache.CacheHibernateUtils">
		<property name="sessionFactory">
			<ref bean="sessionFactory"/>
		</property>
	</bean>
	

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="TransactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory"/>
		</property>
	</bean>

	<bean id="DaoJdbcUtil" class="at.workflow.webdesk.tools.DaoJdbcUtil">
		<property name="dialect">
			<value>${hibernate.dialect}</value>
		</property>
		
		<property name="dataSource">
			<ref bean="webdesk-DataSource"/>
		</property>
		<property name="webdeskDataSource">
			<ref bean="webdesk-DataSource"/>
		</property>
	</bean>
	
	<!--  
	   This Interceptor is used for Services, which have NO transactions bound (f.i. because they are acting like 'batch-machines' - PoRegistrationService)
	   Be aware that in Unit-tests (AbstractTransactionionalSpringHSQLDBTestCases) this might cause problems when you try to execute methods of 
	   Services, which have bound this interceptor.
	   
	   Then you might get exceptions like:
	   org.springframework.dao.InvalidDataAccessApiUsageException: Write operations are not allowed in read-only mode (FlushMode.NEVER/MANUAL): 
	   Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.
	   
	   In order to use PoRegistrationService inside testcases, use the 'PoRegistrationServiceTarget' Bean instead!
	 -->
	 <!--  needs to be updated, if we want to switch to JPA -->
	<bean name="hibernateInterceptor"
		class="org.springframework.orm.hibernate3.HibernateInterceptor">
		<property name="sessionFactory">
			<ref bean="sessionFactory"/>
		</property>
		<property name="flushMode">
			<value>0</value>
		</property>
	</bean>
	
	<!--  
	   Use this event Listener to check UPDATE AND CREATEs of a specific Hibernate 2nd Level Cache entry
	   managed by EhCache. To Disable this cache, put a nonsense into 'cacheUnderInvestigation'
	   -->
	<bean name="LoggingCacheEventListener" class="at.workflow.webdesk.tools.cache.LoggingCacheEventListener" init-method="init">
	   <property name="cacheUnderInvestigation" value="deactivated"/>
	   <property name="cacheManager" ref="CacheManager"/>
	   <property name="columnIndexUnderInvestigation" value="2"/>
	   <property name="expectedColumnTypeUnderInvestigation" value="java.lang.String"/>
	   <property name="expectedColumnUnderInvestigationIsUid" value="true"/>
	   <property name="expectedColumnsCount" value="28"/>
	   <property name="expectedColumnValue" value=""/>
	   <property name="active" value="false"/>
	   <property name="mailAddressToNotify" value="support@webdesk.com"/>
	</bean>

</beans>
