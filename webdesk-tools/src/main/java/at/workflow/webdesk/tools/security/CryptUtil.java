package at.workflow.webdesk.tools.security;

import java.security.GeneralSecurityException;
import java.security.Key;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

/**
 * Encryption/decryption using an hardcoded key with 128 bit AES encryption.
 * This is used for webdesk passwords.
 * 
 * @author fritzberger 22.10.2010
 * @see http://java.sun.com/developer/technicalArticles/Security/AES/AES_v1.html
 */
public class CryptUtil {

	/**
	 * The encryption algorithm to use.
	 * @see http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html
	 */
	private static final String ALGORITHM = "AES";

	/**
	 * Key bytes (hardcoded) for generating ciphers.
	 * Do not change! (Existing passwords could not get decrypted anymore.)
	 * <p />
	 * This was generated by executing following source code:
	 * <pre>
	 * 	KeyGenerator kg = KeyGenerator.getInstance(ALGORITHM);
	 * 	kg.init(128);	// 256 works only with unlimited strength encryption in Java 1.4, see Sun website
	 * 	Key key = kg.generateKey();
	 * 	System.out.println(Arrays.toString(key.getEncoded()));
	 * </pre>
	 */
	private static final byte [] keyBytes = new byte [] { 101, -42, -116, 103, 93, 23, -126, 0, 103, 65, 48, -8, -26, -61, 42, -121 };

	/**
	 * Hardcoded key buffer field.
	 */
	private Key key;
	
	/**
	 * Encrypts the passed text (use <code>String.getBytes()</code> to pass bytes).
	 * @param password the text to be encrypted.
	 * @return
	 */
	public byte[] encrypt(byte[] password) {
		try	{
			Cipher cipher = cipher(Cipher.ENCRYPT_MODE);
			return cipher.doFinal(password);
		}
		catch (Exception e)	{
			throw new IllegalStateException(e);
		}
	}

	/**
	 * Decrypts the passed text (use <code>new String(bytes)</code> to turn to String).
	 * @param password the text to be encrypted.
	 * @return
	 */
	public byte[] decrypt(byte [] password) {
		try	{
			Cipher cipher = cipher(Cipher.DECRYPT_MODE);
			return cipher.doFinal(password);
		}
		catch (Exception e)	{
			throw new IllegalStateException(e);
		}
	}
	
	private Cipher cipher(int opmode) throws GeneralSecurityException {
		Cipher cipher = Cipher.getInstance(ALGORITHM);
		// is not reusable, always construct a new one
		if (key == null)
			key = new SecretKeySpec(keyBytes, ALGORITHM);
		cipher.init(opmode, key);
		return cipher;
	}

}
